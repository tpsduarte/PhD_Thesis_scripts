##PhD thesis - Chapter 4 - Scripts

## Illumina reads:

#FASTQC v0.11.8:

cd <input directory>
for f in *P1.fastq.gz
do
mkdir -p <output directory>/${f%%.*}
zcat $f | fastqc -t 4 stdin -o  <output directory>/${f%%.*}
done


#Trimming adapters from Illumina reads with Trimmomatic (v0.36) (same as in Chapter 2):
java -jar <trimmomatic installation directory>/trimmomatic-0.36.jar PE \
-threads 32 \
-phred33 \
-trimlog <logs output directory>/trim_${sample}.log \
<input directory>/<sample ID>_R1.fastq.gz <input directory>/<sample ID>_R2.fastq.gz \
<output directory>/<sample ID>_P1.fastq.gz <output directory for unpaired reads>/<sample ID>_U1.fastq.gz <output directory>/<sample ID>_P2.fastq.gz <output directory for unpaired reads>/<sample ID>_U2.fastq.gz  \
ILLUMINACLIP:<trimmomatic installation directory>/adapters/NexteraPE-PE.fa:3:30:10 SLIDINGWINDOW:4:15 LEADING:10 TRAILING:10 MINLEN:36

##Basecalling with Guppy v3.3.0 (same as in Chapter 3):

guppy_basecaller -i <input directory>/fast5 -s <output directory> -c <configuration file> --qscore_filtering -q 0 --recursive --device "cuda:0 cuda:1 cuda:2 cuda:3" gpu_runners_per_device 4

configuration file, option -c:
MinION: dna_r9.4.1_450bps_hac.cfg
PromethION:dna_r9.4.1_450bps_hac_prom.cfg

##Demultiplexing with qcat v1.1.0 (same as in Chapter 3):

qcat -f <input directory>/<guppy_basecall_file>.fastq -b <output directory> -k RPB004/RLB001 --trim --detect-middle

##Reads statistics with NanoComp v1.5.1 (same as in Chapter 3):
NanoComp -t 8 --readtype 1D -o <output directory> --verbose -f png --title <title of the report> -n <names of the fastq files to compare> --fastq 1.fastq 2.fastq <... x.fastq>

##Illumina reads pre-analysis:
1) Obtain .sam file from mapping WGS fastq to human genome GRch38 with BWA (v0.7.17):
  bwa mem <GRCh38 directory>/GRCh38_full_analysis_set_plus_decoy_hla.fa <input directory>/<sample ID>_P1.fastq.gz <input directory>/<sample ID>_P2.fastq.gz > <input directory>/<sample ID>.sam
2) .sam file statistics and conversion to .bam  with samtools (v1.10):
samtools flagstat <input directory>/<sample ID>.sam > <output directory 1>/<sample ID>_stats_sam.out
samtools view -S -b <input directory>/<sample ID>.sam > <output directory 2>/<sample ID>.bam
3) .bam file statistics and obtain unmapped reads (microbial reads only, not human):
samtools flagstat <output directory 2>/<sample ID>.bam > <output directory 3>/<sample ID>_stats_bam.out
samtools view -b -f 4 <output directory 2>/<sample ID>.bam > <output directory 4>/<sample ID>_unmapped.bam
4) unmaped reads statistics check:
samtools flagstat <output directory 4>/<sample ID>.bam > <output directory 5>/<sample ID>_stats_bam_unmapped.out
5) removal of duplicates:
5.1) samtools sort -n -O BAM -o <output directory 6>/<sample ID>_namesort.bam <output directory 4>/<sample ID>.bam
5.2) samtools fixmate -m -O BAM <output directory 6>/<sample ID>.bam <output directory 7>/<sample ID>_fixmate.bam
5.3) samtools sort -o <output directory 8>/<sample ID>_positionsort.bam <output directory 7>/<sample ID>.bam
5.4) samtools markdup -r -s -f <output directory 9>/Stats.txt -O BAM $<output directory 8>/<sample ID>.bam <output directory 9>/<sample ID>_rmdup.bam
6) .bam file without duplication check:
samtools flagstat <output directory 9>/<sample ID>.bam > <output directory 10>/<sample ID>_stats_bam.out
7) conversion of .bam file to .fastq file with bedtools2 (v2.29.1):
bedtools bamtofastq -i <output directory 9>/<sample ID>.bam -fq <output directory 11>/<sample ID>_microbesonly_1.fastq -fq2 <output directory 11>/<sample ID>_microbesonly_2.fastq


##ONT reads pre-analysis:
  
1) Obtain .sam file from mapping WGS fastq to human genome GRch38 with Minimap2 (v2.17):
1.1) minimap2 -x map-ont -d <minimap2 indexing location>/GRCh38_full_analysis_set_plus_decoy_hla.mmi <minimap2 indexing location>/GRCh38_full_analysis_set_plus_decoy_hla.fa
1.2) minimap2 -ax map-ont <minimap2 indexing location>/GRCh38_full_analysis_set_plus_decoy_hla.mmi <input directory>/<sample ID>_.fastq > <output directory>/<sample ID>_.sam


2) same as above for Illumina reads, but with removal of fq2 and without the removal of duplicates (steps 5 and 6). 


##Taxonomic classification:  
  
#Kraken2 v2.0.8a with Kraken2 DB (RefSeq DB):
kraken2 --db <database location> --output <output directory>/<sample ID>.krk --report <output directory>/<sample ID>.report <input directory>/<sample ID>.fastq

#bracken v.2.5.3:
bracken -d <database location> -i <input directory of Kraken2 results>/<sample ID>.report -w <output directory>/<sample ID>.outreport -r <number of bases> -l S -t 0

Option -r:
WGS Illumina reads: 200
WGS ONT reads: 1000
WGS Illumina/ONT/hybrid assemblies: 1400

#Blastn   
blastn -query <input directory>/<sample ID>.fasta -db <db directory>/bacteriaDB_blastn -outfmt 6 -out <output directory>/<sample ID>.txt -evalue 0.1

#miniGTDB
kraken2 --db <db directory location> <input file>.fastq --output <output directory>/<file ID>.out --report <output directory>/<file ID>.report
  
  
#npAnalysis (same as in Chapter 2)

  
## Assembly:

#Short-reads assembly (Illumina, fresh and cultured samples) with metaSPAdes v3.13 (same as in Chapter 2):
/usr/bin/time -v -o <output directory>/metaSPAdes_time.log spades.py --meta -k 55,77,99,107,127 -1 <input directory>/<sample ID>_P1.fastq -2 <input directory>/<sample ID>_P2.fastq --nanopore <ONT sample ID>.fastq -o <output directory>
  
#Long-reads only assembly (ONT):
  
A) metaFlye (v2.4.2):
flye --nano-raw <ONT sample ID>.fastq --meta --plasmids --genome-size 200m -i 4 --threads 8 --out-dir <output directory> 


B) wtdgb2 (v2.5):
 1) wtdbg2 -x ont -t 16 --node-max 1000 -e 2 -i <input sample>.fastq -o <output directory>/<sample ID>
 2) wtpoa-cns -t 16 -i <output directory>/<sample ID>.ctg.lay.gz -o <output directory>/wtdbg2_assembly.fasta


#Hybrid assembly
A) OPERA-MS (v0.8.3):
  perl <>OPERA-MS directory/OPERA-MS.pl  --short-read1 <input directory>/<sample ID>_P1.fastq --short-read2 <input directory>/<sample ID>_P2.fastq --long-read <ONT sample ID>.fastq --num-processors 10 --out-dir <output directory> 2> log.err


B) metaSPAdes (v3.13):
/usr/bin/time -v -o <output directory>/metaSPAdes_time.log spades.py --meta -k 55,77,99,107,127 -1 <input directory>/<sample ID>_P1.fastq -2 <input directory>/<sample ID>_P2.fastq --nanopore <ONT sample ID>.fastq -o <output directory>
 
C) npGraph v1.1 (default and binning option), 
  1) run metaspades with Illumina reads only (as above for short-reads): 
  2) convert fastg from metaSpades assembly to fasta and index that to use with minimap2:
  awk -F'[:;]' -v q="'" '/^>/{if(index($1,q) ==0 ) flag=1; else flag=0;} {if(flag) print $1}' <input directory of the metaspades assembly>/assembly_graph.fastg > <output directory>/<sample ID>_assembly_graph.fasta
  minimap2 -t16 -k15 -w5 -d <output directory>/<sample ID>_assembly_graph.mmi <output directory>/<sample ID>_assembly_graph.fasta
  3)  Run npgraph:
  3.1) default npgraph:
  /usr/bin/time -v -o <output directory>/<sample ID>_npgraph_time.log java -Xmx40g -cp <directory of npgraph installation>/assembly-0.1.1-SNAPSHOT.jar org.rtassembly.NPGraphCmd --si <input directory of the metaspades assembly>/assembly_graph.fastg --li <ONT sample ID>.fastq --output <output directory> --keep --aligner minimap2 --algOpt "-t8 -k15 -w5" --msa kalign > <output directory>/<sample ID>_npgraph.log 2>&1
  3.2) npgraph with binning:
  3.2.1) alignt pair-end reads to the assembly graph contigs + sort the bam file:
  bwa index <output directory>/<sample ID>_assembly_graph.fasta
/usr/bin/time -v -o <output directory>/<sample ID>_bin_bwa_time.log bwa mem -t8 <output directory>/<sample ID>_assembly_graph.fasta <input directory>/<sample ID>_P1.fastq <input directory>/<sample ID>_P2.fastq | samtools view -hF 2304 - | samtools sort -@8 -o <output directory>/bin.bam - \
&& jgi_summarize_bam_contig_depths --outputDepth <output directory>/cov.txt <output directory>/bin.bam \
&& rm <output directory>/bin.bam
  3.2.2)run metaBAT with  --saveCls --noBinOut to have the binning information
/usr/bin/time -v -o <output directory>/<sample_ID>_bin_metabat2_time.log metabat  --saveCls --noBinOut --inFile <output directory>/<sample ID>_assembly_graph.fasta --abdFile <output directory>/cov.txt --outFile <output directory>/<sample ID>_metaSPAdes_contigs.bin
  3.2.3) run npGraph with binning info
/usr/bin/time -v -o <output directory>/<sample ID>_bin_npgraph_time.log java -Xmx40g -cp <directory of npgraph installation>/assembly-0.1.1-SNAPSHOT.jar org.rtassembly.NPGraphCmd --si <input directory of the metaspades assembly>/assembly_graph.fastg --li <ONT sample ID>.fastq --sb <output directory>/<sample ID>_metaSPAdes_contigs.bin --output <output directory> --keep --aligner minimap2 --algOpt "-t8 -k15 -w5" --msa kalign > <output directory>/<sample ID>_npgraph.log 2>&1
run MetaBAt with bins output
  

D) Unicycler (v0.4.7):
/usr/bin/time -v -o <output directory>/unicycler_time.log unicycler-runner.py -1 <input directory>/<sample ID>_P1.fastq -2 <input directory>/<sample ID>_P2.fastq -l <ONT sample ID>.fastq -o <output directory> --mode normal --no_miniasm --no_pilon --no_rotate --threads 8 > <output directory>/unicycler_out.log 2>&1


#Binning of the assemblies with metaWRAP (v.1.2.1):
1) Binning module:
  metawrap binning -o <output directory 1> -t 96 -a assembly.fasta --metabat2 --maxbin2 --concoct <input directory>/<sample ID>_P1.fastq <input directory>/<sample ID>_P2.fastq --run-checkm
2) Bin refinement:
  metawrap bin_refinement -o <output directory 2> -t 96 -A <output directory 1>/metabat2_bins/ -B <output directory 1>/maxbin2_bins/ -C <output directory 1>/concoct_bins/ -c 70 -x 10
3)Blobology module:
  metawrap blobology -a assembly.fasta -t 96 -o <output directory 3> --bins <output directory 2>/metawrap_70_10_bins <input directory>/<sample ID>_P1.fastq <input directory>/<sample ID>_P2.fastq
4) Reassembly and binning (Megablast align with NCBI nt database):
  metawrap reassemble_bins -o <output directory 4>  -1 <input directory>/<sample ID>_P1.fastq -2 <input directory>/<sample ID>_P2.fastq -t 96 -m 800 -c 70 -x 10 -b <output directory 2>/metawrap_70_10_bins
5) Bins taxonomic classification:
  metawrap classify_bins -b <output directory 4> /reassembled_bins -o <output directory 5>  -t 48
  

#QC of the bins with CheckM (v1.1.2):
1)checkm lineage_wf -x fasta <bins directory> <output directory> --nt --tab_table
2)checkm qa -t 8 <output directory>/lineage.ms <output directory> -o 2 > <output directory>/<bins directory>_tab_complecont_stats.txt
3)checkm marker_plot -x fasta <output directory> <bins directory> <output directory for marketplot>

## Sequence typing 

#Extraction of Staphylococcus aureus reads 
jsa.seq.binseq --sequence <sample ID>.fastq --map <kraken2 output>.krk --typer k --output <output directory ID (NOTE: cannot be previously created)>

NOTE: option '--include 1280' can also be used

#Sequence typing of Staphylococcus aureus reads with sketchy (v0.4.4):
sketchy run --fastq <input directory>/<sample ID>.fastq --sketchy ~/.sketchy/saureus_15_10000 -o <output directory> --limit 1000

#Sequence typing of Staphylococcus aureus assemblies with Sccion (v0.1.a8):
sccion type -a assembly.fasta
